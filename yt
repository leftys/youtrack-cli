#!/usr/bin/env python
import youtrack.connection
import click
import datetime
import pprint
import os
import sys


try:
	YOUTRACK_API_URL = os.environ['YOUTRACK_API_URL']
	YOUTRACK_AUTH_TOKEN = os.environ['YOUTRACK_AUTH_TOKEN']
except KeyError:
	click.echo(
		'Please define YOUTRACK_API_URL (youtrack domain with https is fine) and YOUTRACK_AUTH_TOKEN.'
		''
	)
	sys.exit(1)


@click.group()
def yt():
	pass


@yt.command('issue')
@click.argument('project')
@click.argument('summary')
@click.option('-a', '--assignee')
@click.option('-r', '--reviewer')
@click.option('-u', '--subproject')
@click.option('-t', '--stage')
@click.option('-m', '--milestone')
@click.option('--description', default = '')
@click.option('--priority')
def issue(project, summary, assignee, reviewer, subproject, stage, milestone, description, priority):
	api = youtrack.connection.Connection(YOUTRACK_API_URL, token = YOUTRACK_AUTH_TOKEN)
	ret = api.createIssue(
		project = project,
		assignee = assignee,
		summary = summary,
		description = description,
		priority = priority,
	)
	try:
		issue_id = ret[0]['location'].split('/')[-1]
	except (KeyError, IndexError):
		click.echo('Unable to get issue id from YouTrack response: ' + ret)
		return
	set_custom_field(api, issue_id, 'Reviewer', reviewer)
	set_custom_field(api, issue_id, 'Subproject', subproject)
	set_custom_field(api, issue_id, 'Stage', stage)
	set_custom_field(api, issue_id, 'Subtask of', milestone)
	click.echo('Created issue ' + issue_id)


def set_custom_field(api, issue_id, field_name, field_value):
	if field_value:
		res = api.executeCommand(issue_id, field_name + ' ' + field_value)
		assert res == 'Command executed'


@yt.command('show')
@click.argument('issue-id')
def show(issue_id):
	api = youtrack.connection.Connection(YOUTRACK_API_URL, token = YOUTRACK_AUTH_TOKEN)
	issue = api.getIssue(issue_id)
	click.echo('{:10s} {}'.format(issue.id, issue.summary))
	click.echo()
	click.echo(issue.description)
	click.echo()
	click.echo('Stage      ' + issue.Stage)
	click.echo('Assignee   ' + issue.Assignee)
	click.echo('Subproject ' + issue.Subproject)
	click.echo('Priority   ' + issue.Priority)
	if 'Due Date' in issue:
		due_date = str(datetime.datetime.fromtimestamp(int(issue['Due Date']) // 1000))
	else:
		due_date = '-'
	click.echo('Due date   ' + due_date)


@yt.command('browse')
@click.argument('issue-id')
def browse(issue_id):
	os.system('xdg-open \'' + YOUTRACK_API_URL + 'issue/' + issue_id + '\'') 


@yt.command('reviewed')
@click.argument('issue-id')
def reviewed(issue_id):
	api = youtrack.connection.Connection(YOUTRACK_API_URL, token = YOUTRACK_AUTH_TOKEN)
	issue = api.getIssue(issue_id)
	api.executeCommand(issue_id, 'Stage To Do Now')
	click.echo('ToDo <- ' + issue['summary'])\


@yt.command('done')
@click.argument('issue-id')
def done(issue_id):
	api = youtrack.connection.Connection(YOUTRACK_API_URL, token = YOUTRACK_AUTH_TOKEN)
	issue = api.getIssue(issue_id)
	api.executeCommand(issue_id, 'Stage Done, Needs review')
	click.echo('Done, Needs review <- ' + issue['summary'])


@yt.command('command')
@click.argument('issue-id')
@click.argument('command')
def command(issue_id, command):
	api = youtrack.connection.Connection(YOUTRACK_API_URL, token = YOUTRACK_AUTH_TOKEN)
	issue = api.getIssue(issue_id)
	try:
		api.executeCommand(issue_id, command)
	except youtrack.YouTrackException as ex:
		click.echo(ex.message)
	else:
		click.echo('Executed on issue ' + issue['summary'])


@yt.command('last')
@click.option('-p', '--project')
@click.option('-m', '--mine', is_flag = True)
@click.option('-o', '--open', is_flag = True)
@click.option('-l', '--last', default = 10, help = 'How many issues to print')
def last(project, mine, open, last):
	api = youtrack.connection.Connection(YOUTRACK_API_URL, token = YOUTRACK_AUTH_TOKEN)
	filter_string = 'Sort by: {Updated} desc'
	if project:
		filter_string += ' AND Project: ' + project
	if mine:
		filter_string += ' AND (Assignee: me OR Reviewer: me)'
	if open:
		filter_string += ' AND Stage: -Archived AND Stage: -Resolved'
	click.echo('Filtering with: ' + filter_string)
	click.echo()
	for issue in api.getAllIssues(max = last, filter = filter_string):
		click.echo('{:10s} {:8s}  {:70s}'.format(issue.id, issue.Stage[:8], issue.summary))



if __name__ == '__main__':
	yt()
